---
import type { Variant } from "./types";
import { variantMap, colorToClass } from "./types";

interface Props {
  color?: "primary" | "secondary" | "tertiary" | "dark" | "light";
  variant?: Variant;
  font?: "font-primary" | "font-serif";
  class?: string;
}

const {
  color = "dark",
  variant = "normal",
  font: overideFont,
  class: propClassName,
} = Astro.props;

const { size, weight, font } = variantMap[variant] ?? variantMap.normal;
const colorClass = colorToClass[color] ?? "text-dark";

const classes = [overideFont || font, colorClass, size, weight, "mb-2"];

if (propClassName) {
  classes.push(propClassName);
}

const className = classes.join(" ");
---

{
  (() => {
    switch (variant) {
      case "h1":
        return (
          <h1 class={className}>
            <slot />
          </h1>
        );
      case "h2":
        return (
          <h2 class={className}>
            <slot />
          </h2>
        );
      case "h3":
        return (
          <h3 class={className}>
            <slot />
          </h3>
        );
      case "small":
        return (
          <small class={className}>
            <slot />
          </small>
        );
      case "tertiary":
        return (
          <span class={className}>
            <slot />
          </span>
        );
      default:
        return (
          <p class={className}>
            <slot />
          </p>
        );
    }
  })()
}
